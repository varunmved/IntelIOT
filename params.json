{"name":"Inteliot","tagline":"Intel IOT Temperature ","body":"### Intel IOT Health-Kit Thermometer (The Medipal)\r\nI first want to start out by warning you, the reader, that this battle station isn't fully operational. My team \"Medipal\" has been frantically trying to get everything together by our presentation. We're a team of four students and between geographical problems and having no idea what we were doing at times, we've tried our best to put out something to show off.\r\n\r\n### Purpose of this page + Credit where it's due\r\nI'm trying to put together some code so I can walk you through how to make your Intel IOT board serve as a cloud connected thermometer. I'll try to continue to keep updating this page as much as I can. I want to integrate the google maps API so we can really track where the temperatures are varying.\r\n\r\nAlmost all of the credit for figuring this out goes to Jason Everett who made [this](http://blog.ijasoneverett.com/2013/03/a-sample-app-with-node-js-express-and-mongodb-part-1/) wonderful tutorial on how to make an app using node.js, express, and mongoDB. Additionally, I based a lot of my code around [this](https://github.com/gomobile/iotapp-local-temperature) writeup by the brilliant folks at intel. \r\n\r\n### Where do we begin!?\r\nThe first thing you'll want to do is install the aspects of the package that we'll be using.\r\n* You'll first want to download [MongoDB](http://www.mongodb.org/downloads), specifically the 32-bit version for Linux. MongoDB is essentially a NoSQL database which can easily run on multiple platforms. This is great for our project since we're running a 32-bit Yocto-Linux OS. One key thing to note though! USE YOUR EXTERNAL SD CARD. you need a minimum of 2GB, so you really don't want to be running out of space here. If you find difficulty installing it, unzip the contents on your computer and copy the .tar/.gz file onto your sd card. Installing it from there should be fairly easy with the terminal.\r\n\r\n* Next, get express up and running your Edison. [Express](http://expressjs.com/) is a web application framework that runs on top of node.js which will make our lives much easier. Both Jason's tutorial and Intel's github page require express as well. This is another package that can be installed by using npm. In order to install, make sure you're logged in as the root user with elevated permissions. \r\nSimply type in the text below, it's important you add the -generator portion, because otherwise it will keep uninstalling at every instance you try to run your app.\r\n```\r\nnpm install -g express-generator\r\n````\r\n\r\n*Next, get libmraa installed on your board. [Libmraa](https://github.com/intel-iot-devkit/mraa) is what binds the c/c++ libraries to javascript code allowing us to interface with the IO on the board. We'll need this to use our grove-sensors in order to get the temperature. The link has the following instructions as well\r\n```\r\necho \"src mraa-upm http://iotdk.intel.com/repos/1.1/intelgalactic\" > /etc/opkg/mraa-upm.conf\r\nopkg update\r\nopkg install libmraa0\r\n```\r\n\r\n\r\n### Let's write some code\r\nA\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Contact\r\nFeel free to tweet me at [@vved123](https://twitter.com/vved123) if you have any questions about anything on the page here.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}